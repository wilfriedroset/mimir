name: ci
on:
  push:
    branches:
      - main
      - r[0-9]+ # Trigger builds after a push to weekly branches
    tags:
      # The following regex matches the Mimir release tag. Tag filters not as strict due to different regex system on Github Actions.
      - mimir-[0-9]+.[0-9]+.[0-9]+**
  pull_request:

concurrency:
  # Cancel any running workflow for the same branch when new commits are pushed.
  # We group both by ref_name (available when CI is triggered by a push to a branch/tag)
  # and head_ref (available when CI is triggered by a PR).
  group: "${{ github.ref_name }}-${{ github.head_ref }}"
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-20.04
    container:
      image: grafana/mimir-build-image:chore-build-multiplatform-images-75dbba45b
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        # Commands in the Makefile are hardcoded with an assumed file structure of the CI container
        # Symlink ensures paths specified in previous commands don’t break
      - name: Symlink Expected Path to Workspace
        run: |
          mkdir -p /go/src/github.com/grafana/mimir
          ln -s $GITHUB_WORKSPACE/* /go/src/github.com/grafana/mimir
      - name: Lint
        run: make BUILD_IN_CONTAINER=false lint
      - name: Check Vendor Directory
        run: make BUILD_IN_CONTAINER=false mod-check
      - name: Check Protos
        run: make BUILD_IN_CONTAINER=false check-protos
      - name: Check Generated Documentation
        run: make BUILD_IN_CONTAINER=false check-doc
      - name: Check Documentation Links
        run: make BUILD_IN_CONTAINER=false check-doc-links
      - name: Check White Noise.
        run: make BUILD_IN_CONTAINER=false check-white-noise
      - name: Check License Header
        run: make BUILD_IN_CONTAINER=false check-license
      - name: Check Docker-Compose YAML
        run: make BUILD_IN_CONTAINER=false check-tsdb-blocks-storage-s3-docker-compose-yaml

  lint-jsonnet:
    runs-on: ubuntu-20.04
    container:
      image: grafana/mimir-build-image:chore-build-multiplatform-images-75dbba45b
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        # Commands in the Makefile are hardcoded with an assumed file structure of the CI container
        # Symlink ensures paths specified in previous commands don’t break
      - name: Symlink Expected Path to Workspace
        run: |
          mkdir -p /go/src/github.com/grafana/mimir
          ln -s $GITHUB_WORKSPACE/* /go/src/github.com/grafana/mimir
      - name: Check Mixin
        run: make BUILD_IN_CONTAINER=false check-mixin
      - name: Check Jsonnet Manifests
        run: make BUILD_IN_CONTAINER=false check-jsonnet-manifests
      - name: Check Jsonnet Getting Started
        run: make BUILD_IN_CONTAINER=false check-jsonnet-getting-started
      - name: Check Jsonnet Tests
        run: make BUILD_IN_CONTAINER=false check-jsonnet-tests

  test:
    runs-on: ubuntu-20.04
    strategy:
      # Do not abort other groups when one fails.
      fail-fast: false
      # Split tests into 4 groups.
      matrix:
        test_group_id:    [0, 1, 2, 3]
        test_group_total: [4]
    container:
      image: grafana/mimir-build-image:chore-build-multiplatform-images-75dbba45b
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Symlink Expected Path to Workspace
        run: |
          mkdir -p /go/src/github.com/grafana/mimir
          ln -s $GITHUB_WORKSPACE/* /go/src/github.com/grafana/mimir
      - name: Run Tests
        run: |
          echo "Running unit tests (group ${{ matrix.test_group_id }} of ${{ matrix.test_group_total }}) with Go version: $(go version)"
          ./.github/workflows/scripts/run-unit-tests-group.sh --index ${{ matrix.test_group_id }} --total ${{ matrix.test_group_total }}
        

  test-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v1
      - name: Build Website
        run: |
          docker run -v ${PWD}/docs/sources:/hugo/content/docs/mimir/latest -e HUGO_REFLINKSERRORLEVEL=ERROR --rm grafana/docs-base:latest /bin/bash -c 'mkdir -p content/docs/grafana/latest/ && touch content/docs/grafana/latest/menu.yaml && make prod'

  build-mimir:
    runs-on: ubuntu-20.04
    container:
      image: grafana/mimir-build-image:chore-build-multiplatform-images-75dbba45b
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Install Docker Client
        run: ./.github/workflows/scripts/install-docker.sh
      - name: Symlink Expected Path to Workspace
        run: |
          mkdir -p /go/src/github.com/grafana/mimir
          ln -s $GITHUB_WORKSPACE/* /go/src/github.com/grafana/mimir
      - name: Build Images
        run: |
          export GIT_REVISION=$(git rev-parse --short HEAD)
          export VERSION=$(cat "./VERSION" 2> /dev/null)
          export GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          # Configure ko's image creation timestamp to correspond to the commit timestamp
          export SOURCE_DATE_EPOCH=$(git show -s --format=%ct)
          export KO_DOCKER_REPO=grafana
          ko build -B --image-label org.opencontainers.image.title=mimir,org.opencontainers.image.source=https://github.com/grafana/mimir/tree/main/cmd/mimir,org.opencontainers.image.revision=${GIT_REVISION} --oci-layout-path mimir-oci-layout --platform=linux/amd64,linux/arm64 --push=false ./cmd/mimir
      - name: Create Mimir OCI Image Layout Archive
        run: tar -cvf mimir-oci-layout.tar mimir-oci-layout
      - name: Upload Mimir OCI Image Layout
        uses: actions/upload-artifact@v2
        with:
          name: Mimir OCI Image Layout
          path: ./mimir-oci-layout.tar

  build-tools:
    runs-on: ubuntu-20.04
    container:
      image: grafana/mimir-build-image:chore-build-multiplatform-images-75dbba45b
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Install Docker Client
        run: ./.github/workflows/scripts/install-docker.sh
      - name: Symlink Expected Path to Workspace
        run: |
          mkdir -p /go/src/github.com/grafana/mimir
          ln -s $GITHUB_WORKSPACE/* /go/src/github.com/grafana/mimir
      - name: Build Images
        # Build everything except mimir (run by build-mimir job) and build image (not managed by CI).
        run: |
          IMAGES="mimirtool metaconvert query-tee"
          export GIT_REVISION=$(git rev-parse --short HEAD)
          export VERSION=$(cat "./VERSION" 2> /dev/null)
          export GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          # Configure ko's image creation timestamp to correspond to the commit timestamp
          export SOURCE_DATE_EPOCH=$(git show -s --format=%ct)
          export KO_DOCKER_REPO=grafana
          for name in ${IMAGES}; do
            ko build -B --image-label org.opencontainers.image.title=${name},org.opencontainers.image.source=https://github.com/grafana/mimir/tree/main/cmd/${name},org.opencontainers.image.revision=${GIT_REVISION} --oci-layout-path ${name}-oci-layout --platform=linux/amd64,linux/arm64 --push=false ./cmd/${name}
          done
      - name: Create Tool OCI Image Layouts Archive
        run: tar -cvf tool-oci-layouts.tar *-oci-layout
      - name: Upload Tool OCI Image Layouts
        uses: actions/upload-artifact@v2
        with:
          name: Tool OCI Image Layouts
          path: ./tool-oci-layouts.tar

  integration:
    needs: build-mimir
    runs-on: ubuntu-20.04
    strategy:
      # Do not abort other groups when one fails.
      fail-fast: false
      # Split tests into 4 groups.
      matrix:
        test_group_id:    [0, 1, 2, 3]
        test_group_total: [4]
    steps:
      - name: Upgrade golang
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.8
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Install Docker Client
        run: sudo ./.github/workflows/scripts/install-docker.sh
      # TODO: Work into image, since this job doesn't use the Mimir build image (which has ko installed)
      - name: Install ko
        run: |
          go install github.com/grafana/ko@main
      - name: Symlink Expected Path to Workspace
        run: |
          sudo mkdir -p /go/src/github.com/grafana/mimir
          sudo ln -s $GITHUB_WORKSPACE/* /go/src/github.com/grafana/mimir
      - name: Download Mimir OCI Image Layout
        uses: actions/download-artifact@v2
        with:
          name: Mimir OCI Image Layout
      - name: Load Docker Images
        run: |
          tar -xvf mimir-oci-layout.tar
          IMAGE_TAG=$(make image-tag)
          KO_DOCKER_REPO=grafana ko publish-layout -B --tags ${IMAGE_TAG} --local mimir mimir-oci-layout
      - name: Preload Images
        # We download docker images used by integration tests so that all images are available
        # locally and the download time doesn't account in the test execution time, which is subject
        # to a timeout
        run: go run ./tools/pre-pull-images | xargs -n1 docker pull
      - name: Integration Tests
        run: |
          export IMAGE_TAG=$(make image-tag)
          export MIMIR_IMAGE="grafana/mimir:$IMAGE_TAG"
          export MIMIR_CHECKOUT_DIR="/go/src/github.com/grafana/mimir"
          echo "Running integration tests with image: $MIMIR_IMAGE"
          echo "Running integration tests (group ${{ matrix.test_group_id }} of ${{ matrix.test_group_total }}) with Go version: $(go version)"
          ./.github/workflows/scripts/run-integration-tests-group.sh --index ${{ matrix.test_group_id }} --total ${{ matrix.test_group_total }}

  deploy:
    needs: [build-mimir, build-tools, test, lint, integration]
    # Only deploy images on pushes to the grafana/mimir repo, which either are tag pushes or weekly release branch pushes.
    if: (startsWith(github.ref, 'refs/tags/') || startsWith(github.ref, 'refs/heads/r') ) && github.event_name == 'push' && github.repository == 'grafana/mimir'
    runs-on: ubuntu-20.04
    container:
      image: grafana/mimir-build-image:chore-build-multiplatform-images-75dbba45b
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Install Docker Client
        run: ./.github/workflows/scripts/install-docker.sh
      - name: Symlink Expected Path to Workspace
        run: |
          mkdir -p /go/src/github.com/grafana/mimir
          ln -s $GITHUB_WORKSPACE/* /go/src/github.com/grafana/mimir
      - name: Download Tool OCI Image Layouts
        uses: actions/download-artifact@v2
        with:
          name: Tool OCI Image Layouts
      - name: Download Mimir OCI Image Layout
        uses: actions/download-artifact@v2
        with:
          name: Mimir OCI Image Layout
      - name: Extract OCI Image Layouts
        run: |
          tar -xvf mimir-oci-layout.tar
          tar -xvf tool-oci-layouts.tar
      - name: Deploy
        run: |
          if [ -n "$DOCKER_PASSWORD" ]; then
            printenv DOCKER_PASSWORD | ko login -u "$DOCKER_USERNAME" --password-stdin
          fi
          export IMAGE_TAG=$(./tools/image-tag)
          make ci-push-images
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
